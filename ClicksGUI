--real moment

print (tostring(game:HttpGet("https://raw.githubusercontent.com/Clickgameplay/clickgameplayuniversal/refs/heads/main/print", true))) -- sauce im sorry i copied i just want to revive you ðŸ˜­
print (tostring(game:HttpGet("https://raw.githubusercontent.com/Clickgameplay/clickgameplayuniversal/refs/heads/main/print2", true))) 

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Click's Universal Script ",
   LoadingTitle = "Clickgameplay's GUI",
   LoadingSubtitle = "(discord: clickgameplay1)",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = "clickgameplayuniversalscript", -- Create a custom folder for your hub/game
      FileName = "save"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "8nb9B9ZAZy", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Clickgameplay Universal Script Key System",
      Subtitle = "Key System",
      Note = "Get the key in Click's discord: 8nb9B9ZAZy", -- Use this to tell the user how to get a key
      FileName = "clickkeysystem", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"69gamingreal69"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("General", "globe")
local Section = Tab:CreateSection("General stuff")
local Button = Tab:CreateButton({
   Name = "Infinite yield",
   Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
Rayfield:Notify({
   Title = "Successfully Loaded!",
   Content = "Works without issues (hopefully)",
   Duration = 3,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = { -- Duplicate this table (or remove it) to add and remove buttons to the notification.
         Name = "Okay!",
         Callback = function()
         end
      },

},
})
   end,
})
local Button = Tab:CreateButton({
   Name = "Vadrifts - The Best Chat Bypasser",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/vqmpjayZ/Bypass/main/vadrifts.lua"))()
Rayfield:Notify({
   Title = "Successfully Loaded!",
   Content = "Works without issues (hopefully)",
   Duration = 3,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = { -- Duplicate this table (or remove it) to add and remove buttons to the notification.
         Name = "Okay!",
         Callback = function()
         end
      },

},
})
   end,
})
local Button = Tab:CreateButton({
   Name = "Dex",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Babyhamsta/RBLX_Scripts/main/Universal/BypassedDarkDexV3.lua", true))()
Rayfield:Notify({
   Title = "Successfully Loaded!",
   Content = "Works without issues (hopefully)",
   Duration = 3,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = { -- Duplicate this table (or remove it) to add and remove buttons to the notification.
         Name = "Okay!",
         Callback = function()
         end
      },

},
})
   end,
})
local Button = Tab:CreateButton({
   Name = "Nameless Admin",
   Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source'))()
Rayfield:Notify({
   Title = "Successfully Loaded!",
   Content = "Works without issues (hopefully)",
   Duration = 3,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = { -- Duplicate this table (or remove it) to add and remove buttons to the notification.
         Name = "Okay!",
         Callback = function()
         end
      },

},
})
   end,
})











local Settings = Window:CreateTab("Settings", "wrench") -- Title, Image
local Dropdown = Settings:CreateDropdown({
   Name = "Theme Selector",
   Options = {"Default", "Amber Glow", "Amethyst", "Bloom", "Dark Blue", "Green", "Light", "Ocean", "Serenity"},
   CurrentOption = {"Default"}, -- Default selected theme
   MultipleOptions = false, -- Single selection
   Flag = "ThemeDropdown", -- Unique identifier for this dropdown
   Callback = function(Options)
      -- Map the dropdown name to the actual theme identifier
      local themeMap = {
         ["Default"] = "Default",
         ["Amber Glow"] = "AmberGlow",
         ["Amethyst"] = "Amethyst",
         ["Bloom"] = "Bloom",
         ["Dark Blue"] = "DarkBlue",
         ["Green"] = "Green",
         ["Light"] = "Light",
         ["Ocean"] = "Ocean",
         ["Serenity"] = "Serenity",
      }

      -- Get the selected theme name from Options
      local selectedThemeName = Options[1]

      -- Look up the corresponding theme identifier
      local selectedThemeIdentifier = themeMap[selectedThemeName]

      -- Apply the selected theme
      if selectedThemeIdentifier then
         Window.ModifyTheme(selectedThemeIdentifier)
         print("Theme changed to:", selectedThemeIdentifier) -- Debugging message
      else
         warn("Selected theme does not have a valid identifier!")
      end
   end,
})

Rayfield:LoadConfiguration()
